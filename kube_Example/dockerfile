# # === STAGE 1: Build Stage (Installs Dependencies) ===
# FROM python:3.14-rc-bullseye AS builder

# # Install system dependencies, Rust, and Cargo for Pydantic
# RUN apt-get update && apt-get install -y \
#     libpq-dev \
#     gcc \
#     curl \
#     build-essential \
#     && curl https://sh.rustup.rs -sSf | sh -s -- -y \
#     && export PATH="$HOME/.cargo/bin:$PATH"

# # Set working directory for building
# WORKDIR /app

# # Copy only requirements file first for better Docker caching
# COPY requirements.txt .

# # Install dependencies
# RUN pip install --no-cache-dir -r requirements.txt

# # === STAGE 2: Final Stage (Copy App & Reduce Image Size) ===
# FROM python:3.14-rc-bullseye

# # Set working directory for final image
# WORKDIR /app

# # Copy installed dependencies from builder stage to final image
# COPY --from=builder /usr/local/lib/python3.14 /usr/local/lib/python3.14
# COPY --from=builder /usr/local/bin /usr/local/bin

# # Copy the application files
# COPY . .

# # Expose the application port inside the container
# EXPOSE 8080

# # Run the FastAPI application
# CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8080"]





FROM python:3.13.2-bullseye

# RUN /bin/sh -c pip install --no-cache-dir -r requirements.txt
RUN apt-get update && apt-get -y install libpq-dev gcc && pip install psycopg

# Install system dependencies including Rust and Cargo

RUN pip install httpx

WORKDIR /app

COPY requirements.txt /app

RUN pip install --no-cache-dir -r requirements.txt

COPY . /app


# COPY templates app/templates
# COPY static app/static

# COPY openapi_server ./

# the port here is the port inside that continer so the app will start at port 8080 inside the container
CMD ["uvicorn","main:app","--host","0.0.0.0","--port","8080"]

# # CMD ["/usr/local/bin/python","-m","uvicorn","main:app","--host","0.0.0.0","--port","8080"]